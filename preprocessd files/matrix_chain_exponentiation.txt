			// Time complexity O(N^3)
mem(dp);			
for(i=0;i<n;i++){
    dp[i][i] = 0;		// important initialisatons 
    color[i][i] = a[i];
}

for(l=2;l<=n;l++){
    for(i=0;i<=n-l;i++){
        j = i + l -1;
        dp[i][j] = INT_MAX;
        for(k = i;k<=j-1;k++){		// do not forget this loop must start from i because our options stast with 
				// with k = i to j-1;
            cost = dp[i][k] + dp[k+1][j] + color[i][k]*color[k+1][j];

            if(cost < dp[i][j]){
                dp[i][j] = cost;
                color[i][j] = (color[i][k]+color[k+1][j])%100;
            }
        }
    }
}

cout<<dp[0][n-1]<<endl;